import matplotlib.pyplot as plt
def plot_pdp(self, X, y, feature_name, n_clusters = 2):
    feature_id = -1
    y_pred_vals = []
    y_pred_mean = []
    for index in range(X.shape[1]):
        if X.columns[index] == feature_name:
            feature_id = index
    X_new = X.copy()
    for feature_val in np.unique(X.values[:, feature_id]):
        
        X_new.values[:, feature_id] = feature_val
        y_pred_val = self.predict(X_new)
        
        y_pred_vals.append(y_pred_val)
           
   """keeping all other feature values constant, find the values of target variable
   for each unique value of this variable"""
    del X_new    
 
    y_pred_randoms = np.random.normal(y_pred_vals)[:n_clusters]
  
    y_pred_mean = np.mean(y_pred_vals, axis = 0)
    print("y_pred_mean: "+str(y_pred_mean))
    plt.plot(X.values[:, feature_id], y_pred_mean)
    plt.show()
        
RandomForest.plot_pdp = plot_pdp
idxs = np.random.permutation(X_train.shape[0])[:10]
plot_pdp(rf_mine, X_train.iloc[idxs, :], y_train[idxs], 'OverallQual')
